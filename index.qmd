---
title: "Influenza A H7N9 in China, 2013"
author: "Jerome Milimu"
format: dashboard
theme: lux
editor_options: 
  chunk_output_type: console
---

```{r}
# Load packages 
#if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, 
               outbreaks, 
               bslib, 
               bsicons, 
               shiny, 
               rgeoboundaries, 
               plotly, 
               htmltools, 
               reactable)

# view data
#head(outbreaks::fluH7N9_china_2013)
```


```{r}
# calculating the main metrics 
total_cases <- 
  fluH7N9_china_2013 %>% 
  nrow() 

total_deaths <- 
  fluH7N9_china_2013 %>% 
  filter(outcome == "Death") %>% 
  nrow()

total_hospitalizations  <-  
  fluH7N9_china_2013 %>% 
  filter(!is.na(date_of_hospitalisation)) %>% 
  nrow()

```

```{r results='hide', message=FALSE, warning = FALSE}

# Map of Cases by Province

pacman::p_load(outbreaks, rgeoboundaries, plotly)

### MAP OF CASES PER PROVINCE
province_summary <- fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

# Check the keys to see if join will be successful
setdiff(province_summary$province, china_map$shapeName)
setdiff(china_map$shapeName, province_summary$province)
# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Check if join will work fine
setdiff(province_summary$province, china_map$province)

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  
# Check again
setdiff(province_summary$province, china_map$province)

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")

```

```{r}
#china_map_plot_ggplotly
```


```{r}
# Create a bar chart to show the number of cases per province 

# Summarize by province
data_summary <- 
  fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(number_of_cases = n()) %>% 
  arrange(desc(number_of_cases)) %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

# create the bar plot
cases_province <- 
  ggplot(data_summary,
      aes(x = reorder(province, number_of_cases),
          y = number_of_cases,
          fill = number_of_cases, 
          text = tooltip_label)) +
  geom_col() +
  labs(y = "Number of Cases") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.title.y = element_blank()) +
  coord_flip() 
  
  
cases_province_ggplotly <- 
  ggplotly(cases_province, tooltip = "text")
```

```{r}
#cases_province_ggplotly
```


# HOME 
## Row 1 {height="25%"}

```{r}
value_box(
  title = "Total Cases",
  value = total_cases,
  showcase = bsicons::bs_icon("virus"),
  theme = value_box_theme(bg = "#518fd6")
)
```

```{r}
value_box(
  title = "Total Hospitalizations",
  value = total_hospitalizations,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#214773")
)
```

```{r}
value_box(
  title = "Total Deaths",
  value = total_deaths,
  showcase = bsicons::bs_icon("journal-medical"),
  theme = value_box_theme(bg = "#3f71ab")
)
```

## Row 2 {height="75%"}

###  {width="40%"}

```{r title = "Map of Countries by Life Expectancy"}
cases_province_ggplotly
```

###  {width="60%"}

```{r title = "Top 20 Countries by Life Expectancy"}
china_map_plot_ggplotly
```


# DOWNLOAD DATA

The data used in this dashboard is shown below and can be downloaded as a CSV.

```{r}
library(htmltools)

htmltools::browsable(
  tagList(
    reactable(fluH7N9_china_2013, 
              elementId = "fluH7N9_china_2013-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('fluH7N9_china_2013-table')")
  )
)
```

